IPT_Qos_Performance <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Qos_Performance.csv")
View(IPT_Qos_Performance)
IPT_Qos_Performance
IPT_Traffic
IPT_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Traffic.csv")
IPT_Traffic
summary(IPT_Traffic)
head(IPT_Traffic)
summary(IPT_Traffic$SPEED.Mpbs.)
hist(IPT_Traffic$SPEED.Mpbs.)
table(IPT_Traffic$SPEED.Mpbs.)
cor(IPT_Traffic$SPEED.Mpbs., IPT_Traffic$MINIMUM_COMMITMENT.Mbps.)
IPT_Traffic$Extra <- IPT_Traffic$SPEED.Mpbs. - IPT_Traffic$MINIMUM_COMMITMENT.Mbps.
summary(IPT_Traffic$Extra)
IPT_Traffic$Extra
sum(IPT_Traffic$Extra)
sum(IPT_Traffic$SPEED.Mpbs.)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
View(Mobility_Signaling_Operator_Traffic)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic$DESTINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_COUNTRY)
sum(Mobility_Signaling_Operator_Traffic$OUTBOUND_MESSAGES)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
View(Mobility_Signaling_Peering_Traffic)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
Mobility_Signaling_Peering_Traffic
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
hist(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, )
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID = "iBN0")
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
?subset
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
View(Mobility_Signaling_Operator_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
Mobility_Signaling_Peering_Traffic
sum(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
sum(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
?aggregate
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, sum)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID ~ Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
View(Mobility_Signaling_Operator_Traffic)
table(aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum))
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUNBD<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
str(OU)
str(OUTBOUND)
rm(OUTBOUNBD)
OUTBOUND
?sort
?order
?order
str(OUTBOUND)
order(OUTBOUND, OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
attach(OUTBOUND)
detach(OUTBOUND)
INBOUND
?INBOUND
INBOUND
OUTBOUND[order(OUTBOUND),]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
attach(OUTBOUND)
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
INBOUND
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
STR(OUTBOUND)
STR(OUTBOUND)
Str(OUTBOUND)
str(OUTBOUND)
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND[,1]
OUTBOUND[,2]
OUTBOUND[,order(OUTBOUND[,2]]
OUTBOUND[,order(OUTBOUND[,2]),]
OUTBOUND[order(OUTBOUND[,2]),]
?order
OUTBOUND[order(OUTBOUND[,2], decreasing=FALSE),]
OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND <-  OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND
OUTBOUND[1:10,]
topCustomers <- OUTBOUND[1:10,][2]
OUTBOUND[1:10,][2]
OUTBOUND[1:10,][1]
topcustomers <- OUTBOUND[1:10,][1]
topcustomer
topcustomers
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
topCustomersOut <- OUTBOUND[1:10,][1]
INBOUND <- INBOUND[order(INBOUND[,2], decreasing=TRUE),]
INBOUND[1:10,]
topCustomersIn
topCustomersIn <- INBOUND[1:10,][1]
topCustomersIn
update('arules')
update("arules")
install.packages("arules")
data("Adult")
library('arules')
data("Adult")
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r2 <- apriori(Adult[1001:2000], parameter = list(support = 0.5))
r_comb <- c(r1, r2)
duplicated(r_comb)
data("Groceries")
s <- Groceries[,itemFrequency(Groceries)>0.05]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward"))
## cluster transactions for a sample of Adult
data("Adult")
s <- sample(Adult, 500)
## calculate Jaccard distances and do hclust
d_jaccard <- dissimilarity(s)
hc <- hclust(d_jaccard)
plot(hc)
## get 20 clusters and look at the difference of the item frequencies (bars)
## for the top 20 items) in cluster 1 compared to the data (line)
assign <- cutree(hc, 20)
itemFrequencyPlot(s[assign==1], population=s, topN=20)
## calculate affinity-based distances and do hclust
d_affinity <- dissimilarity(s, method = "affinity")
hc <- hclust(d_affinity)
plot(hc)
## cluster rules
rules <- apriori(Adult, parameter=list(support=0.3))
rules <- subset(rules, subset = lift > 2)
## use affinity
## we need to supply the item affinities from the dataset (sample)
d_affinity <- dissimilarity(rules, method = "affinity",
args = list(affinity = affinity(s)))
plot(hclust(d_affinity))
plot(hclust(d_affinity))
data("Adult")
rules <- apriori(Adult,
parameter = list(supp = 0.5, conf = 0.9,
target = "rules"))
summary(rules)
Adult
summary(adult)
summary(Adult)
str(Adult)
options(java.parameters = "-Xm30000m")
library(zipcode)
library(plyr)
library(rJava)
require(xlsx)
require(XLConnect)
file <- system.file("efile_CSJ_2014", "efile_CSJ_2014.xlsx", package = "xlsx")
res <- read.xlsx(file, 1) # read the second sheet
options(java.parameters = "-Xmx1024m")
library(XLConnect)
wb1 <- loadWorkbook("efile_newest_CSJ_2014.xlsx")
secchi_main <- readWorksheet(wb1, sheet = 1)
colnames(secchi_main) <- c("date", "secchi_depth", "year", "month")
setwd('~/Github/OpenDSJv2/R/hurtmedata/')
wb1 <- loadWorkbook("efile_newest_CSJ_2014.xlsx")
A.contri <- readWorksheet(wb1, sheet = 1)
A.contri
str(A.contri)
